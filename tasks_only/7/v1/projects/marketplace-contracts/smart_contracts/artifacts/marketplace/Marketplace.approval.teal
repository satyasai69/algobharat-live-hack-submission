#pragma version 10

smart_contracts.marketplace.contract.Marketplace.approval_program:
    // smart_contracts/marketplace/contract.py:4
    // class Marketplace(ARC4Contract):
    method "create_application(asset,uint64)void"
    method "opt_in_to_asset(pay)void"
    method "set_price(uint64)void"
    method "buy(pay,uint64)void"
    method "delete_application()void"
    txna ApplicationArgs 0
    match main_create_application_route@1 main_opt_in_to_asset_route@2 main_set_price_route@3 main_buy_route@4 main_delete_application_route@5
    err // reject transaction

main_create_application_route@1:
    // smart_contracts/marketplace/contract.py:11
    // @abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // smart_contracts/marketplace/contract.py:4
    // class Marketplace(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    // smart_contracts/marketplace/contract.py:11
    // @abimethod(allow_actions=["NoOp"], create="require")
    callsub create_application
    int 1
    return

main_opt_in_to_asset_route@2:
    // smart_contracts/marketplace/contract.py:16
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/marketplace/contract.py:4
    // class Marketplace(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // smart_contracts/marketplace/contract.py:16
    // @abimethod
    callsub opt_in_to_asset
    int 1
    return

main_set_price_route@3:
    // smart_contracts/marketplace/contract.py:30
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/marketplace/contract.py:4
    // class Marketplace(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/marketplace/contract.py:30
    // @abimethod
    callsub set_price
    int 1
    return

main_buy_route@4:
    // smart_contracts/marketplace/contract.py:36
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/marketplace/contract.py:4
    // class Marketplace(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    // smart_contracts/marketplace/contract.py:36
    // @abimethod
    callsub buy
    int 1
    return

main_delete_application_route@5:
    // smart_contracts/marketplace/contract.py:51
    // @abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub delete_application
    int 1
    return


// smart_contracts.marketplace.contract.Marketplace.create_application(asset_id: uint64, unitary_price: uint64) -> void:
create_application:
    // smart_contracts/marketplace/contract.py:11-12
    // @abimethod(allow_actions=["NoOp"], create="require")
    // def create_application(self, asset_id: Asset, unitary_price: UInt64) -> None: # -> Application Id
    proto 2 0
    // smart_contracts/marketplace/contract.py:5-6
    // # Sell asset
    // asset_id: UInt64
    byte "asset_id"
    // smart_contracts/marketplace/contract.py:13
    // self.asset_id = asset_id.id
    frame_dig -2
    app_global_put
    // smart_contracts/marketplace/contract.py:7-9
    // # decimals -> 1 ETH 18 decimals -> Algorands -> USDT -> 8 decimals
    // # 16 decimals -> USDT 8 decimals
    // unitary_price: UInt64
    byte "unitary_price"
    // smart_contracts/marketplace/contract.py:14
    // self.unitary_price = unitary_price
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.marketplace.contract.Marketplace.opt_in_to_asset(pay: uint64) -> void:
opt_in_to_asset:
    // smart_contracts/marketplace/contract.py:16-17
    // @abimethod
    // def opt_in_to_asset(self, pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/marketplace/contract.py:18
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/marketplace/contract.py:19
    // assert not Global.current_application_address.is_opted_in(Asset(self.asset_id))
    global CurrentApplicationAddress
    int 0
    // smart_contracts/marketplace/contract.py:5-6
    // # Sell asset
    // asset_id: UInt64
    byte "asset_id"
    // smart_contracts/marketplace/contract.py:19
    // assert not Global.current_application_address.is_opted_in(Asset(self.asset_id))
    app_global_get_ex
    assert // check self.asset_id exists
    asset_holding_get AssetBalance
    bury 1
    !
    assert
    // smart_contracts/marketplace/contract.py:21
    // assert pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/marketplace/contract.py:22
    // assert pay.amount == Global.min_balance + Global.asset_opt_in_min_balance #
    frame_dig -1
    gtxns Amount
    global MinBalance
    global AssetOptInMinBalance
    +
    ==
    assert
    // smart_contracts/marketplace/contract.py:24-28
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0
    // ).submit()
    itxn_begin
    // smart_contracts/marketplace/contract.py:25
    // xfer_asset=self.asset_id,
    int 0
    // smart_contracts/marketplace/contract.py:5-6
    // # Sell asset
    // asset_id: UInt64
    byte "asset_id"
    // smart_contracts/marketplace/contract.py:25
    // xfer_asset=self.asset_id,
    app_global_get_ex
    assert // check self.asset_id exists
    // smart_contracts/marketplace/contract.py:26
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/marketplace/contract.py:27
    // asset_amount=0
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/marketplace/contract.py:24
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/marketplace/contract.py:24-28
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.current_application_address,
    //     asset_amount=0
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.marketplace.contract.Marketplace.set_price(unitary_price: uint64) -> void:
set_price:
    // smart_contracts/marketplace/contract.py:30-31
    // @abimethod
    // def set_price(self, unitary_price: UInt64) -> None:
    proto 1 0
    // smart_contracts/marketplace/contract.py:32
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/marketplace/contract.py:7-9
    // # decimals -> 1 ETH 18 decimals -> Algorands -> USDT -> 8 decimals
    // # 16 decimals -> USDT 8 decimals
    // unitary_price: UInt64
    byte "unitary_price"
    // smart_contracts/marketplace/contract.py:34
    // self.unitary_price = unitary_price
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.marketplace.contract.Marketplace.buy(payer: uint64, quantity: uint64) -> void:
buy:
    // smart_contracts/marketplace/contract.py:36-37
    // @abimethod
    // def buy(self, payer: gtxn.PaymentTransaction, quantity: UInt64) -> None:
    proto 2 0
    // smart_contracts/marketplace/contract.py:38
    // assert self.unitary_price != UInt64(0)
    int 0
    // smart_contracts/marketplace/contract.py:7-9
    // # decimals -> 1 ETH 18 decimals -> Algorands -> USDT -> 8 decimals
    // # 16 decimals -> USDT 8 decimals
    // unitary_price: UInt64
    byte "unitary_price"
    // smart_contracts/marketplace/contract.py:38
    // assert self.unitary_price != UInt64(0)
    app_global_get_ex
    assert // check self.unitary_price exists
    assert
    // smart_contracts/marketplace/contract.py:40
    // assert payer.sender == Txn.sender
    frame_dig -2
    gtxns Sender
    txn Sender
    ==
    assert
    // smart_contracts/marketplace/contract.py:41
    // assert payer.receiver == Global.current_application_address
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/marketplace/contract.py:42-43
    // # 100 tokens * unitary_price (100 Algos)
    // assert payer.amount == quantity * self.unitary_price
    frame_dig -2
    gtxns Amount
    int 0
    // smart_contracts/marketplace/contract.py:7-9
    // # decimals -> 1 ETH 18 decimals -> Algorands -> USDT -> 8 decimals
    // # 16 decimals -> USDT 8 decimals
    // unitary_price: UInt64
    byte "unitary_price"
    // smart_contracts/marketplace/contract.py:42-43
    // # 100 tokens * unitary_price (100 Algos)
    // assert payer.amount == quantity * self.unitary_price
    app_global_get_ex
    assert // check self.unitary_price exists
    frame_dig -1
    *
    ==
    assert
    // smart_contracts/marketplace/contract.py:45-49
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity
    // ).submit()
    itxn_begin
    // smart_contracts/marketplace/contract.py:46
    // xfer_asset=self.asset_id,
    int 0
    // smart_contracts/marketplace/contract.py:5-6
    // # Sell asset
    // asset_id: UInt64
    byte "asset_id"
    // smart_contracts/marketplace/contract.py:46
    // xfer_asset=self.asset_id,
    app_global_get_ex
    assert // check self.asset_id exists
    // smart_contracts/marketplace/contract.py:47
    // asset_receiver=Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/marketplace/contract.py:45
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/marketplace/contract.py:45-49
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Txn.sender,
    //     asset_amount=quantity
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.marketplace.contract.Marketplace.delete_application() -> void:
delete_application:
    // smart_contracts/marketplace/contract.py:51-52
    // @abimethod(allow_actions=["DeleteApplication"])
    // def delete_application(self) -> None:
    proto 0 0
    // smart_contracts/marketplace/contract.py:53
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/marketplace/contract.py:55-60
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address
    // ).submit()
    itxn_begin
    // smart_contracts/marketplace/contract.py:56
    // xfer_asset=self.asset_id,
    int 0
    // smart_contracts/marketplace/contract.py:5-6
    // # Sell asset
    // asset_id: UInt64
    byte "asset_id"
    // smart_contracts/marketplace/contract.py:56
    // xfer_asset=self.asset_id,
    app_global_get_ex
    assert // check self.asset_id exists
    // smart_contracts/marketplace/contract.py:57
    // asset_receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/marketplace/contract.py:59
    // asset_close_to=Global.creator_address
    dup
    itxn_field AssetCloseTo
    // smart_contracts/marketplace/contract.py:58
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/marketplace/contract.py:55
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/marketplace/contract.py:55-60
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset_id,
    //     asset_receiver=Global.creator_address,
    //     asset_amount=0,
    //     asset_close_to=Global.creator_address
    // ).submit()
    itxn_submit
    // smart_contracts/marketplace/contract.py:62-66
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address
    // ).submit()
    itxn_begin
    // smart_contracts/marketplace/contract.py:63
    // receiver=Global.creator_address,
    global CreatorAddress
    // smart_contracts/marketplace/contract.py:65
    // close_remainder_to=Global.creator_address
    dup
    itxn_field CloseRemainderTo
    // smart_contracts/marketplace/contract.py:64
    // amount=0,
    int 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/marketplace/contract.py:62
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/marketplace/contract.py:62-66
    // itxn.Payment(
    //     receiver=Global.creator_address,
    //     amount=0,
    //     close_remainder_to=Global.creator_address
    // ).submit()
    itxn_submit
    retsub
