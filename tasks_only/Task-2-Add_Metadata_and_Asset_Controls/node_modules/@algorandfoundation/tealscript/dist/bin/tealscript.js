#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs"));
const argparse_1 = require("argparse");
const typescript_1 = __importDefault(require("typescript"));
const ts_morph_1 = require("ts-morph");
const glob_1 = require("glob");
const compiler_1 = __importDefault(require("../lib/compiler"));
require("dotenv/config");
const version_1 = require("../version");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function processFile(filename, parsed) {
    // Output dir for artifacts
    const dir = parsed.output;
    const tsConfigFilePath = path_1.default.join(process.cwd(), typescript_1.default.findConfigFile(filename, typescript_1.default.sys.fileExists, 'tsconfig.json'));
    const project = new ts_morph_1.Project({
        tsConfigFilePath,
    });
    if (project.getCompilerOptions().experimentalDecorators !== true) {
        // eslint-disable-next-line no-console
        console.warn(`WARNING: 'experimentalDecorators' is not enabled in your tsconfig.json. TEALScript is manually overriding this option (in memory) for compilation. This will slightly increase the TEALSCript compile time. Please set 'experimentalDecorators' to 'true' in ${tsConfigFilePath}.`);
        project.compilerOptions.set({ experimentalDecorators: true });
    }
    const options = {
        algodPort: process.env.ALGOD_PORT ? Number(process.env.ALGOD_PORT) : undefined,
        algodServer: process.env.ALGOD_SERVER,
        algodToken: process.env.ALGOD_TOKEN,
        disableWarnings: parsed.disable_warnings,
        disableOverflowChecks: parsed.unsafe_disable_overflow_checks,
        disableTypeScript: parsed.unsafe_disable_typescript,
        srcPath: filename,
        project,
        cwd: process.cwd(),
        skipAlgod: parsed.skip_algod,
    };
    const compilers = compiler_1.default.compileAll(options);
    compilers.forEach(async (compilerPromise) => {
        const compiler = await compilerPromise;
        const { name } = compiler;
        const approvalPath = path_1.default.join(dir, `${name}.approval.teal`);
        const clearPath = path_1.default.join(dir, `${name}.clear.teal`);
        const abiPath = path_1.default.join(dir, `${name}.arc4.json`);
        const appPath = path_1.default.join(dir, `${name}.arc32.json`);
        const srcmapPath = path_1.default.join(dir, `${name}.src_map.json`);
        const lsigPath = path_1.default.join(dir, `${name}.lsig.teal`);
        const arc56Path = path_1.default.join(dir, `${name}.arc56.json`);
        if (fs.existsSync(approvalPath))
            fs.rmSync(approvalPath);
        if (fs.existsSync(clearPath))
            fs.rmSync(clearPath);
        if (fs.existsSync(abiPath))
            fs.rmSync(abiPath);
        if (fs.existsSync(appPath))
            fs.rmSync(appPath);
        if (fs.existsSync(srcmapPath))
            fs.rmSync(srcmapPath);
        if (fs.existsSync(lsigPath))
            fs.rmSync(lsigPath);
        if (fs.existsSync(arc56Path))
            fs.rmSync(arc56Path);
        if (compiler.teal.lsig.length > 0) {
            fs.writeFileSync(lsigPath, compiler.teal.lsig.map((t) => t.teal).join('\n'));
            fs.writeFileSync(srcmapPath, JSON.stringify(compiler.sourceInfo, null, 2));
            return;
        }
        fs.writeFileSync(approvalPath, compiler.teal.approval.map((t) => t.teal).join('\n'));
        fs.writeFileSync(clearPath, compiler.teal.clear.map((t) => t.teal).join('\n'));
        fs.writeFileSync(abiPath, JSON.stringify(compiler.arc4Description(), null, 2));
        fs.writeFileSync(srcmapPath, JSON.stringify(compiler.sourceInfo, null, 2));
        fs.writeFileSync(appPath, JSON.stringify(compiler.arc32Description(), null, 2));
        fs.writeFileSync(arc56Path, JSON.stringify(compiler.arc56Description(), null, 2));
    });
}
const parser = new argparse_1.ArgumentParser({
    description: 'Argparse example',
});
parser.add_argument('input', { help: 'TEALScript source file(s) to compile', nargs: '*' });
parser.add_argument('output', { help: 'output directory for artifacts' });
parser.add_argument('-v', '--version', { action: 'version', version: version_1.VERSION });
parser.add_argument('--disable-warnings', {
    help: 'disables compiler warnings',
    action: 'store_true',
    default: false,
});
parser.add_argument('--unsafe-disable-overflow-checks', {
    help: 'disables overflow checks for ABI uint/ufixed types',
    action: 'store_true',
    default: false,
});
parser.add_argument('--unsafe-disable-typescript', {
    help: 'disables typescript diagnostics',
    action: 'store_true',
    default: false,
});
parser.add_argument('--skip-algod', {
    help: 'Skip algod compilation. This results in no source mapping and no algod assebmler error checking. The emitted TEAL may not properly compile without additional steps.',
    action: 'store_true',
    default: false,
});
const parsed = parser.parse_args();
parsed.input.forEach((f) => (0, glob_1.globSync)(f).forEach((gf) => {
    processFile(gf, parsed);
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVhbHNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW4vdGVhbHNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLGdEQUF3QjtBQUN4Qix1Q0FBeUI7QUFDekIsdUNBQTBDO0FBQzFDLDREQUE0QjtBQUM1Qix1Q0FBbUM7QUFDbkMsK0JBQWdDO0FBQ2hDLCtEQUF1QztBQUV2Qyx5QkFBdUI7QUFDdkIsd0NBQXFDO0FBRXJDLDhEQUE4RDtBQUM5RCxLQUFLLFVBQVUsV0FBVyxDQUFDLFFBQWdCLEVBQUUsTUFBVztJQUN0RCwyQkFBMkI7SUFDM0IsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUUxQixNQUFNLGdCQUFnQixHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLG9CQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxvQkFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFFLENBQUMsQ0FBQztJQUVwSCxNQUFNLE9BQU8sR0FBRyxJQUFJLGtCQUFPLENBQUM7UUFDMUIsZ0JBQWdCO0tBQ2pCLENBQUMsQ0FBQztJQUVILElBQUksT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUMsc0JBQXNCLEtBQUssSUFBSSxFQUFFO1FBQ2hFLHNDQUFzQztRQUN0QyxPQUFPLENBQUMsSUFBSSxDQUNWLGdRQUFnUSxnQkFBZ0IsR0FBRyxDQUNwUixDQUFDO1FBQ0YsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQy9EO0lBRUQsTUFBTSxPQUFPLEdBQUc7UUFDZCxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVB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