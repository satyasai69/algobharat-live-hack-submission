'use strict';

var algosdk = require('algosdk');
var indexer = require('./indexer.js');

var decodeSignedTransaction = algosdk.decodeSignedTransaction;
/**
 * Allows you to keep track of Algorand transaction IDs by wrapping an `Algodv2` in a proxy.
 * Useful for automated tests.
 */
class TransactionLogger {
    constructor() {
        this._sentTransactionIds = [];
    }
    /**
     * The list of transaction IDs that has been logged thus far.
     */
    get sentTransactionIds() {
        return this._sentTransactionIds;
    }
    /**
     * Clear all logged IDs.
     */
    clear() {
        this._sentTransactionIds = [];
    }
    /**
     * The method that captures raw transactions and stores the transaction IDs.
     */
    logRawTransaction(signedTransactions) {
        if (Array.isArray(signedTransactions)) {
            for (const stxn of signedTransactions) {
                const decoded = decodeSignedTransaction(stxn);
                this._sentTransactionIds.push(decoded.txn.txID());
            }
        }
        else {
            const decoded = decodeSignedTransaction(signedTransactions);
            this._sentTransactionIds.push(decoded.txn.txID());
        }
    }
    /** Return a proxy that wraps the given Algodv2 with this transaction logger.
     *
     * @param algod The `Algodv2` to wrap
     * @returns The wrapped `Algodv2`, any transactions sent using this algod instance will be logged by this transaction logger
     */
    capture(algod) {
        return new Proxy(algod, new TransactionLoggingAlgodv2ProxyHandler(this));
    }
    /** Wait until all logged transactions IDs appear in the given `Indexer`. */
    async waitForIndexer(indexer$1) {
        if (this._sentTransactionIds.length === 0)
            return;
        const lastTxId = this._sentTransactionIds[this._sentTransactionIds.length - 1];
        await indexer.runWhenIndexerCaughtUp(() => indexer$1.lookupTransactionByID(lastTxId).do());
    }
}
class TransactionLoggingAlgodv2ProxyHandler {
    constructor(transactionLogger) {
        this.transactionLogger = transactionLogger;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get(target, property, receiver) {
        if (property === 'sendRawTransaction') {
            return (stxOrStxs) => {
                this.transactionLogger.logRawTransaction(stxOrStxs);
                return target[property].call(receiver, stxOrStxs);
            };
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return target[property];
    }
}

exports.TransactionLogger = TransactionLogger;
//# sourceMappingURL=transaction-logger.js.map
