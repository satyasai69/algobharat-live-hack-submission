#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 1000000 5
    bytecblock "total_claimed" "user_claims" 0x151f7c75
    // smart_contracts/algorand_challenge/contract.algo.ts:11
    // export class TokenClaim extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x02bece11 0xf5892d56 0x44f96e29 0x74fe2b72 0x54254f0a // method "hello(string)string", method "claimTokens()void", method "claimAlgo()void", method "getTotalClaimed()uint64", method "fundContract()void"
    txna ApplicationArgs 0
    match main_hello_route@3 main_claimTokens_route@4 main_claimAlgo_route@5 main_getTotalClaimed_route@6 main_fundContract_route@7

main_after_if_else@14:
    // smart_contracts/algorand_challenge/contract.algo.ts:11
    // export class TokenClaim extends Contract {
    intc_0 // 0
    return

main_fundContract_route@7:
    // smart_contracts/algorand_challenge/contract.algo.ts:120
    // public fundContract(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_getTotalClaimed_route@6:
    // smart_contracts/algorand_challenge/contract.algo.ts:106
    // public getTotalClaimed(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getTotalClaimed
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_claimAlgo_route@5:
    // smart_contracts/algorand_challenge/contract.algo.ts:73
    // public claimAlgo(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub claimAlgo
    intc_1 // 1
    return

main_claimTokens_route@4:
    // smart_contracts/algorand_challenge/contract.algo.ts:41
    // public claimTokens(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub claimTokens
    intc_1 // 1
    return

main_hello_route@3:
    // smart_contracts/algorand_challenge/contract.algo.ts:29
    // public hello(name: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/algorand_challenge/contract.algo.ts:11
    // export class TokenClaim extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/algorand_challenge/contract.algo.ts:29
    // public hello(name: string): string {
    callsub hello
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // smart_contracts/algorand_challenge/contract.algo.ts:11
    // export class TokenClaim extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/algorand_challenge/contract.algo.ts::TokenClaim.hello(name: bytes) -> bytes:
hello:
    // smart_contracts/algorand_challenge/contract.algo.ts:29
    // public hello(name: string): string {
    proto 1 1
    // smart_contracts/algorand_challenge/contract.algo.ts:30
    // return `${this.getHello()} ${name}`;
    pushbytes "Hello "
    frame_dig -1
    concat
    retsub


// smart_contracts/algorand_challenge/contract.algo.ts::TokenClaim.claimTokens() -> void:
claimTokens:
    // smart_contracts/algorand_challenge/contract.algo.ts:42
    // const claimer = Txn.sender;
    txn Sender
    // smart_contracts/algorand_challenge/contract.algo.ts:45
    // const userClaimCount = this.userClaims(claimer).value;
    dup
    intc_0 // 0
    // smart_contracts/algorand_challenge/contract.algo.ts:21
    // private userClaims = LocalState<uint64>({ key: 'user_claims' });
    bytec_1 // "user_claims"
    // smart_contracts/algorand_challenge/contract.algo.ts:45
    // const userClaimCount = this.userClaims(claimer).value;
    app_local_get_ex
    assert // check LocalState exists
    // smart_contracts/algorand_challenge/contract.algo.ts:46
    // assert(userClaimCount < MAX_CLAIMS_PER_USER, 'Maximum claims reached');
    dup
    // smart_contracts/algorand_challenge/contract.algo.ts:7
    // const MAX_CLAIMS_PER_USER: uint64 = 5;
    intc_3 // 5
    // smart_contracts/algorand_challenge/contract.algo.ts:46
    // assert(userClaimCount < MAX_CLAIMS_PER_USER, 'Maximum claims reached');
    <
    assert // Maximum claims reached
    // smart_contracts/algorand_challenge/contract.algo.ts:58-62
    // itxn.assetTransfer({
    //   assetReceiver: claimer,
    //   assetAmount: CLAIM_AMOUNT,
    //   xferAsset: ASSET_ID,
    // }).submit();
    itxn_begin
    // smart_contracts/algorand_challenge/contract.algo.ts:8
    // const ASSET_ID: uint64 = 0; // Set your asset ID here
    intc_0 // 0
    itxn_field XferAsset
    // smart_contracts/algorand_challenge/contract.algo.ts:6
    // const CLAIM_AMOUNT: uint64 = 1_000_000; // 1 token (6 decimals)
    intc_2 // 1000000
    itxn_field AssetAmount
    dig 1
    itxn_field AssetReceiver
    // smart_contracts/algorand_challenge/contract.algo.ts:58-62
    // itxn.assetTransfer({
    //   assetReceiver: claimer,
    //   assetAmount: CLAIM_AMOUNT,
    //   xferAsset: ASSET_ID,
    // }).submit();
    pushint 4 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/algorand_challenge/contract.algo.ts:66
    // this.userClaims(claimer).value = userClaimCount + 1;
    intc_1 // 1
    +
    // smart_contracts/algorand_challenge/contract.algo.ts:21
    // private userClaims = LocalState<uint64>({ key: 'user_claims' });
    bytec_1 // "user_claims"
    // smart_contracts/algorand_challenge/contract.algo.ts:66
    // this.userClaims(claimer).value = userClaimCount + 1;
    swap
    app_local_put
    // smart_contracts/algorand_challenge/contract.algo.ts:18
    // private totalClaimed = GlobalState<uint64>({ key: 'total_claimed' });
    intc_0 // 0
    bytec_0 // "total_claimed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/algorand_challenge/contract.algo.ts:6
    // const CLAIM_AMOUNT: uint64 = 1_000_000; // 1 token (6 decimals)
    intc_2 // 1000000
    // smart_contracts/algorand_challenge/contract.algo.ts:67
    // this.totalClaimed.value = this.totalClaimed.value + CLAIM_AMOUNT;
    +
    // smart_contracts/algorand_challenge/contract.algo.ts:18
    // private totalClaimed = GlobalState<uint64>({ key: 'total_claimed' });
    bytec_0 // "total_claimed"
    // smart_contracts/algorand_challenge/contract.algo.ts:67
    // this.totalClaimed.value = this.totalClaimed.value + CLAIM_AMOUNT;
    swap
    app_global_put
    retsub


// smart_contracts/algorand_challenge/contract.algo.ts::TokenClaim.claimAlgo() -> void:
claimAlgo:
    // smart_contracts/algorand_challenge/contract.algo.ts:74
    // const claimer = Txn.sender;
    txn Sender
    // smart_contracts/algorand_challenge/contract.algo.ts:75
    // const userClaimCount = this.userClaims(claimer).value;
    dup
    intc_0 // 0
    // smart_contracts/algorand_challenge/contract.algo.ts:21
    // private userClaims = LocalState<uint64>({ key: 'user_claims' });
    bytec_1 // "user_claims"
    // smart_contracts/algorand_challenge/contract.algo.ts:75
    // const userClaimCount = this.userClaims(claimer).value;
    app_local_get_ex
    assert // check LocalState exists
    // smart_contracts/algorand_challenge/contract.algo.ts:77
    // assert(userClaimCount < MAX_CLAIMS_PER_USER, 'Maximum claims reached');
    dup
    // smart_contracts/algorand_challenge/contract.algo.ts:7
    // const MAX_CLAIMS_PER_USER: uint64 = 5;
    intc_3 // 5
    // smart_contracts/algorand_challenge/contract.algo.ts:77
    // assert(userClaimCount < MAX_CLAIMS_PER_USER, 'Maximum claims reached');
    <
    assert // Maximum claims reached
    // smart_contracts/algorand_challenge/contract.algo.ts:86-89
    // itxn.payment({
    //   receiver: claimer,
    //   amount: CLAIM_AMOUNT,
    // }).submit();
    itxn_begin
    // smart_contracts/algorand_challenge/contract.algo.ts:6
    // const CLAIM_AMOUNT: uint64 = 1_000_000; // 1 token (6 decimals)
    intc_2 // 1000000
    itxn_field Amount
    dig 1
    itxn_field Receiver
    // smart_contracts/algorand_challenge/contract.algo.ts:86-89
    // itxn.payment({
    //   receiver: claimer,
    //   amount: CLAIM_AMOUNT,
    // }).submit();
    intc_1 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // smart_contracts/algorand_challenge/contract.algo.ts:92
    // this.userClaims(claimer).value = userClaimCount + 1;
    intc_1 // 1
    +
    // smart_contracts/algorand_challenge/contract.algo.ts:21
    // private userClaims = LocalState<uint64>({ key: 'user_claims' });
    bytec_1 // "user_claims"
    // smart_contracts/algorand_challenge/contract.algo.ts:92
    // this.userClaims(claimer).value = userClaimCount + 1;
    swap
    app_local_put
    // smart_contracts/algorand_challenge/contract.algo.ts:18
    // private totalClaimed = GlobalState<uint64>({ key: 'total_claimed' });
    intc_0 // 0
    bytec_0 // "total_claimed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/algorand_challenge/contract.algo.ts:6
    // const CLAIM_AMOUNT: uint64 = 1_000_000; // 1 token (6 decimals)
    intc_2 // 1000000
    // smart_contracts/algorand_challenge/contract.algo.ts:93
    // this.totalClaimed.value = this.totalClaimed.value + CLAIM_AMOUNT;
    +
    // smart_contracts/algorand_challenge/contract.algo.ts:18
    // private totalClaimed = GlobalState<uint64>({ key: 'total_claimed' });
    bytec_0 // "total_claimed"
    // smart_contracts/algorand_challenge/contract.algo.ts:93
    // this.totalClaimed.value = this.totalClaimed.value + CLAIM_AMOUNT;
    swap
    app_global_put
    retsub


// smart_contracts/algorand_challenge/contract.algo.ts::TokenClaim.getTotalClaimed() -> uint64:
getTotalClaimed:
    // smart_contracts/algorand_challenge/contract.algo.ts:18
    // private totalClaimed = GlobalState<uint64>({ key: 'total_claimed' });
    intc_0 // 0
    bytec_0 // "total_claimed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/algorand_challenge/contract.algo.ts:107
    // return this.totalClaimed.value;
    retsub
