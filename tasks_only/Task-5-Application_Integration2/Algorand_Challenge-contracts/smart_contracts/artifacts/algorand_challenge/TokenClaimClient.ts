/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TokenClaim","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claimTokens","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Allows anyone to claim tokens\nEach user can claim up to MAX_CLAIMS_PER_USER times","events":[],"recommendations":{}},{"name":"claimAlgo","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Alternative claim function for Algo instead of ASA","events":[],"recommendations":{}},{"name":"getTotalClaimed","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Check total amount claimed by all users","events":[],"recommendations":{}},{"name":"fundContract","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Admin function to fund the contract (optional)","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":1,"bytes":0}},"keys":{"global":{"totalClaimed":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfY2xhaW1lZA=="}},"local":{"userClaims":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlcl9jbGFpbXM="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[207,252],"errorMessage":"Maximum claims reached"},{"pc":[94,103,120,132,144],"errorMessage":"OnCompletion is not NoOp"},{"pc":[179],"errorMessage":"can only call when creating"},{"pc":[97,106,123,135,147],"errorMessage":"can only call when not creating"},{"pc":[235,276,286],"errorMessage":"check GlobalState exists"},{"pc":[203,248],"errorMessage":"check LocalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAHAhD0FJgMNdG90YWxfY2xhaW1lZAt1c2VyX2NsYWltcwQVH3x1MRtBAHyCBQQCvs4RBPWJLVYERPluKQR0/ityBFQlTwo2GgCOBQA0ACgAHAALAAIiQzEZFEQxGEQjQzEZFEQxGESIAK0WKkxQsCNDMRkURDEYRIgAcyNDMRkURDEYRIgAOiNDMRkURDEYRDYaAVcCAIgAGUkVFlcGAkxQKkxQsCNDMRlA/6kxGBREI0OKAQGABkhlbGxvIIv/UIkxAEkiKWNESSUMRLEishEkshJLAbIUgQSyECKyAbMjCClMZiIoZUQkCChMZ4kxAEkiKWNESSUMRLEksghLAbIHI7IQIrIBsyMIKUxmIihlRCQIKExniSIoZUSJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TokenClaim contract
 */
export type TokenClaimArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'claimTokens()void': Record<string, never>
    'claimAlgo()void': Record<string, never>
    'getTotalClaimed()uint64': Record<string, never>
    'fundContract()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'claimTokens()void': []
    'claimAlgo()void': []
    'getTotalClaimed()uint64': []
    'fundContract()void': []
  }
}

/**
 * The return type for each method
 */
export type TokenClaimReturns = {
  'hello(string)string': string
  'claimTokens()void': void
  'claimAlgo()void': void
  'getTotalClaimed()uint64': bigint
  'fundContract()void': void
}

/**
 * Defines the types of available calls and state of the TokenClaim smart contract.
 */
export type TokenClaimTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: TokenClaimArgs['obj']['hello(string)string']
      argsTuple: TokenClaimArgs['tuple']['hello(string)string']
      returns: TokenClaimReturns['hello(string)string']
    }>
    & Record<'claimTokens()void' | 'claimTokens', {
      argsObj: TokenClaimArgs['obj']['claimTokens()void']
      argsTuple: TokenClaimArgs['tuple']['claimTokens()void']
      returns: TokenClaimReturns['claimTokens()void']
    }>
    & Record<'claimAlgo()void' | 'claimAlgo', {
      argsObj: TokenClaimArgs['obj']['claimAlgo()void']
      argsTuple: TokenClaimArgs['tuple']['claimAlgo()void']
      returns: TokenClaimReturns['claimAlgo()void']
    }>
    & Record<'getTotalClaimed()uint64' | 'getTotalClaimed', {
      argsObj: TokenClaimArgs['obj']['getTotalClaimed()uint64']
      argsTuple: TokenClaimArgs['tuple']['getTotalClaimed()uint64']
      returns: TokenClaimReturns['getTotalClaimed()uint64']
    }>
    & Record<'fundContract()void' | 'fundContract', {
      argsObj: TokenClaimArgs['obj']['fundContract()void']
      argsTuple: TokenClaimArgs['tuple']['fundContract()void']
      returns: TokenClaimReturns['fundContract()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalClaimed: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userClaims: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TokenClaimSignatures = keyof TokenClaimTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TokenClaimNonVoidMethodSignatures = keyof TokenClaimTypes['methods'] extends infer T ? T extends keyof TokenClaimTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TokenClaim smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TokenClaimSignatures> = TokenClaimTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TokenClaim smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TokenClaimSignatures> = TokenClaimTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TokenClaimTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = TokenClaimTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TokenClaimCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TokenClaimDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TokenClaimCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TokenClaim smart contract
 */
export abstract class TokenClaimParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<TokenClaimArgs['obj']['hello(string)string'] | TokenClaimArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the claimTokens()void ABI method
   *
  * Allows anyone to claim tokens
  Each user can claim up to MAX_CLAIMS_PER_USER times

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimTokens(params: CallParams<TokenClaimArgs['obj']['claimTokens()void'] | TokenClaimArgs['tuple']['claimTokens()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimTokens()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the claimAlgo()void ABI method
   *
   * Alternative claim function for Algo instead of ASA
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimAlgo(params: CallParams<TokenClaimArgs['obj']['claimAlgo()void'] | TokenClaimArgs['tuple']['claimAlgo()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimAlgo()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalClaimed()uint64 ABI method
   *
   * Check total amount claimed by all users
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalClaimed(params: CallParams<TokenClaimArgs['obj']['getTotalClaimed()uint64'] | TokenClaimArgs['tuple']['getTotalClaimed()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalClaimed()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the fundContract()void ABI method
   *
   * Admin function to fund the contract (optional)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundContract(params: CallParams<TokenClaimArgs['obj']['fundContract()void'] | TokenClaimArgs['tuple']['fundContract()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fundContract()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TokenClaim smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TokenClaimFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TokenClaimFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TokenClaimClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TokenClaimClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TokenClaim smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TokenClaimDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TokenClaimClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenClaim smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenClaim smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TokenClaim smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TokenClaimClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TokenClaim smart contract
 */
export class TokenClaimClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TokenClaimClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TokenClaim app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TokenClaimClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TokenClaimNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TokenClaimClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TokenClaimClient> {
    return new TokenClaimClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TokenClaimClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TokenClaimClient> {
    return new TokenClaimClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TokenClaim smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<TokenClaimArgs['obj']['hello(string)string'] | TokenClaimArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TokenClaimParamsFactory.hello(params))
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `claimTokens()void` ABI method.
     *
    * Allows anyone to claim tokens
    Each user can claim up to MAX_CLAIMS_PER_USER times

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimTokens: (params: CallParams<TokenClaimArgs['obj']['claimTokens()void'] | TokenClaimArgs['tuple']['claimTokens()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenClaimParamsFactory.claimTokens(params))
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `claimAlgo()void` ABI method.
     *
     * Alternative claim function for Algo instead of ASA
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimAlgo: (params: CallParams<TokenClaimArgs['obj']['claimAlgo()void'] | TokenClaimArgs['tuple']['claimAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenClaimParamsFactory.claimAlgo(params))
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `getTotalClaimed()uint64` ABI method.
     *
     * Check total amount claimed by all users
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalClaimed: (params: CallParams<TokenClaimArgs['obj']['getTotalClaimed()uint64'] | TokenClaimArgs['tuple']['getTotalClaimed()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenClaimParamsFactory.getTotalClaimed(params))
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `fundContract()void` ABI method.
     *
     * Admin function to fund the contract (optional)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundContract: (params: CallParams<TokenClaimArgs['obj']['fundContract()void'] | TokenClaimArgs['tuple']['fundContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TokenClaimParamsFactory.fundContract(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TokenClaim smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<TokenClaimArgs['obj']['hello(string)string'] | TokenClaimArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TokenClaimParamsFactory.hello(params))
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `claimTokens()void` ABI method.
     *
    * Allows anyone to claim tokens
    Each user can claim up to MAX_CLAIMS_PER_USER times

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimTokens: (params: CallParams<TokenClaimArgs['obj']['claimTokens()void'] | TokenClaimArgs['tuple']['claimTokens()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenClaimParamsFactory.claimTokens(params))
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `claimAlgo()void` ABI method.
     *
     * Alternative claim function for Algo instead of ASA
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimAlgo: (params: CallParams<TokenClaimArgs['obj']['claimAlgo()void'] | TokenClaimArgs['tuple']['claimAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenClaimParamsFactory.claimAlgo(params))
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `getTotalClaimed()uint64` ABI method.
     *
     * Check total amount claimed by all users
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalClaimed: (params: CallParams<TokenClaimArgs['obj']['getTotalClaimed()uint64'] | TokenClaimArgs['tuple']['getTotalClaimed()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenClaimParamsFactory.getTotalClaimed(params))
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `fundContract()void` ABI method.
     *
     * Admin function to fund the contract (optional)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundContract: (params: CallParams<TokenClaimArgs['obj']['fundContract()void'] | TokenClaimArgs['tuple']['fundContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TokenClaimParamsFactory.fundContract(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TokenClaim smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<TokenClaimArgs['obj']['hello(string)string'] | TokenClaimArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TokenClaimParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | TokenClaimReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `claimTokens()void` ABI method.
     *
    * Allows anyone to claim tokens
    Each user can claim up to MAX_CLAIMS_PER_USER times

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimTokens: async (params: CallParams<TokenClaimArgs['obj']['claimTokens()void'] | TokenClaimArgs['tuple']['claimTokens()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenClaimParamsFactory.claimTokens(params))
      return {...result, return: result.return as unknown as (undefined | TokenClaimReturns['claimTokens()void'])}
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `claimAlgo()void` ABI method.
     *
     * Alternative claim function for Algo instead of ASA
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimAlgo: async (params: CallParams<TokenClaimArgs['obj']['claimAlgo()void'] | TokenClaimArgs['tuple']['claimAlgo()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenClaimParamsFactory.claimAlgo(params))
      return {...result, return: result.return as unknown as (undefined | TokenClaimReturns['claimAlgo()void'])}
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `getTotalClaimed()uint64` ABI method.
     *
     * Check total amount claimed by all users
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalClaimed: async (params: CallParams<TokenClaimArgs['obj']['getTotalClaimed()uint64'] | TokenClaimArgs['tuple']['getTotalClaimed()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenClaimParamsFactory.getTotalClaimed(params))
      return {...result, return: result.return as unknown as (undefined | TokenClaimReturns['getTotalClaimed()uint64'])}
    },

    /**
     * Makes a call to the TokenClaim smart contract using the `fundContract()void` ABI method.
     *
     * Admin function to fund the contract (optional)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundContract: async (params: CallParams<TokenClaimArgs['obj']['fundContract()void'] | TokenClaimArgs['tuple']['fundContract()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TokenClaimParamsFactory.fundContract(params))
      return {...result, return: result.return as unknown as (undefined | TokenClaimReturns['fundContract()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TokenClaimClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TokenClaim app
   */
  state = {
    /**
     * Methods to access global state for the current TokenClaim app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalClaimed: result.totalClaimed,
        }
      },
      /**
       * Get the current value of the totalClaimed key in global state
       */
      totalClaimed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalClaimed")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current TokenClaim app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userClaims: result.userClaims,
          }
        },
        /**
         * Get the current value of the userClaims key in local state
         */
        userClaims: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userClaims")) as bigint | undefined },
      }
    },
  }

  public newGroup(): TokenClaimComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the TokenClaim contract
       */
      hello(params: CallParams<TokenClaimArgs['obj']['hello(string)string'] | TokenClaimArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a claimTokens()void method call against the TokenClaim contract
       */
      claimTokens(params: CallParams<TokenClaimArgs['obj']['claimTokens()void'] | TokenClaimArgs['tuple']['claimTokens()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimTokens(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimAlgo()void method call against the TokenClaim contract
       */
      claimAlgo(params: CallParams<TokenClaimArgs['obj']['claimAlgo()void'] | TokenClaimArgs['tuple']['claimAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getTotalClaimed()uint64 method call against the TokenClaim contract
       */
      getTotalClaimed(params: CallParams<TokenClaimArgs['obj']['getTotalClaimed()uint64'] | TokenClaimArgs['tuple']['getTotalClaimed()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalClaimed(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalClaimed()uint64', v))
        return this
      },
      /**
       * Add a fundContract()void method call against the TokenClaim contract
       */
      fundContract(params: CallParams<TokenClaimArgs['obj']['fundContract()void'] | TokenClaimArgs['tuple']['fundContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the TokenClaim contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TokenClaimComposer
  }
}
export type TokenClaimComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<TokenClaimArgs['obj']['hello(string)string'] | TokenClaimArgs['tuple']['hello(string)string']>): TokenClaimComposer<[...TReturns, TokenClaimReturns['hello(string)string'] | undefined]>

  /**
   * Calls the claimTokens()void ABI method.
   *
  * Allows anyone to claim tokens
  Each user can claim up to MAX_CLAIMS_PER_USER times

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimTokens(params?: CallParams<TokenClaimArgs['obj']['claimTokens()void'] | TokenClaimArgs['tuple']['claimTokens()void']>): TokenClaimComposer<[...TReturns, TokenClaimReturns['claimTokens()void'] | undefined]>

  /**
   * Calls the claimAlgo()void ABI method.
   *
   * Alternative claim function for Algo instead of ASA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimAlgo(params?: CallParams<TokenClaimArgs['obj']['claimAlgo()void'] | TokenClaimArgs['tuple']['claimAlgo()void']>): TokenClaimComposer<[...TReturns, TokenClaimReturns['claimAlgo()void'] | undefined]>

  /**
   * Calls the getTotalClaimed()uint64 ABI method.
   *
   * Check total amount claimed by all users
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalClaimed(params?: CallParams<TokenClaimArgs['obj']['getTotalClaimed()uint64'] | TokenClaimArgs['tuple']['getTotalClaimed()uint64']>): TokenClaimComposer<[...TReturns, TokenClaimReturns['getTotalClaimed()uint64'] | undefined]>

  /**
   * Calls the fundContract()void ABI method.
   *
   * Admin function to fund the contract (optional)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundContract(params?: CallParams<TokenClaimArgs['obj']['fundContract()void'] | TokenClaimArgs['tuple']['fundContract()void']>): TokenClaimComposer<[...TReturns, TokenClaimReturns['fundContract()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TokenClaim smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TokenClaimComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TokenClaimComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TokenClaimComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TokenClaimComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TokenClaimComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TokenClaimComposerResults<TReturns>>
}
export type TokenClaimComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

