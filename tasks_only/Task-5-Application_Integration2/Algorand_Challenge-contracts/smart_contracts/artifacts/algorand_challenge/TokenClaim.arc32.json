{
    "hints": {
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimTokens()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimAlgo()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTotalClaimed()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fundContract()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 1
        }
    },
    "schema": {
        "global": {
            "declared": {
                "totalClaimed": {
                    "type": "uint64",
                    "key": "total_claimed"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "userClaims": {
                    "type": "uint64",
                    "key": "user_claims"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "TokenClaim",
        "methods": [
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "claimTokens",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows anyone to claim tokens\nEach user can claim up to MAX_CLAIMS_PER_USER times"
            },
            {
                "name": "claimAlgo",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Alternative claim function for Algo instead of ASA"
            },
            {
                "name": "getTotalClaimed",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Check total amount claimed by all users"
            },
            {
                "name": "fundContract",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Admin function to fund the contract (optional)"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}